import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'
apply plugin: 'groovy'

repositories {
  mavenLocal()
  mavenCentral()
}


// <gist id="6999603">
String seleniumVersion = "2.53.1"

dependencies {
  testCompile "org.codehaus.groovy:groovy-all:2.3.6"

  testCompile "org.gebish:geb-spock:0.10.0"
  testCompile "org.seleniumhq.selenium:selenium-firefox-driver:${seleniumVersion}"
  testCompile "org.seleniumhq.selenium:selenium-support:${seleniumVersion}"

  testCompile 'org.codehaus.groovy.modules.remote:remote-transport-http:0.5'

  testCompile "org.spockframework:spock-core:1.0-groovy-2.3"
}

sourceSets {
  test {
    groovy {
      srcDirs = ['test/functional']
    }
  }
}
// </gist>

task wrapper(type: Wrapper) {
  gradleVersion = '2.5'
}

// <gist id="6999604">
test {
  // Disable Gradle's up-to-date checking so it always runs the tests, even if I didn't update any test files
  outputs.upToDateWhen { false }

  maxParallelForks = 2

  String grailsServerPort = System.getProperty('server.port', '8080')

  systemProperty "geb.build.reportsDir", file("$buildDir/test-results-functional/geb")
  systemProperty "geb.build.baseUrl", "http://localhost:${grailsServerPort}/geb-parallel-gradle/"
}
// </gist>

// <gist id="6999605">
Process grailsTestAppProcess

test.doFirst {
  // Using the Grails wrapper to start the Grails application in the 'test' environment so the remote control
  // plugin is enabled and my remote util bean is injected from resources.groovy
  println "Starting grails app"

  String grailsRunAppCommand

  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    grailsRunAppCommand = "grailsw.bat test run-app"
  } else {
    grailsRunAppCommand = "./grailsw test run-app"
  }

  grailsTestAppProcess = execCommandAndWaitForStatusString(grailsRunAppCommand, 'Server running.')
}

/**
 * Credit for this method goes to Tomas Lin - adapted from his blog
 * http://fbflex.wordpress.com/2013/03/14/gradle-madness-execwait-a-task-that-waits-for-commandline-calls-to-be-ready/
 */
Process execCommandAndWaitForStatusString(String command, String readyStatusString) {
  ProcessBuilder builder = new ProcessBuilder(command.split(' '))
  builder.redirectErrorStream(true)
  builder.directory(new File("."))
  Process process = builder.start()

  InputStream processStdout = process.getInputStream()
  BufferedReader reader = new BufferedReader(new InputStreamReader(processStdout))

  def line
  while ((line = reader.readLine()) != null) {
    println line
    if (line.contains(readyStatusString)) {
      println "'${command}' is ready"
      break;
    }
  }

  process.consumeProcessOutput(System.out, System.err)

  return process
}
// </gist>

// <gist id="6999606">
task stopGrails << {
  // Grails will shut down when it sees a file called ".kill-run-app"
  // See http://stackoverflow.com/a/4665331
  new File(".kill-run-app").text = ""

  grailsTestAppProcess.waitFor()
}

test.finalizedBy stopGrails
// </gist>
